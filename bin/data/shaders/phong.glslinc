
// needs work
vec4 directional_light(Material mtl, Light light, vec3 eye, vec3 normal, vec4 texcol)
{
	vec4 lightcol = vec4(0.0);
	vec4 diffuse, ambient, specular = vec4(0.0);
	
	// mult material & light ambient
	ambient = mtl.ambient * texcol; 
	lightcol = ambient;

	vec3 light_normal = normalize(light.direction);
	float lambert_term = dot(normal, light.direction);

	if (lambert_term > 0.0)
	{
		vec3 eye_normal = normalize(eye); // viewdir
		vec3 reflect_dir = reflect(-light_normal, normal);

		// mult material & light diffuse
		diffuse = mtl.diffuse * lambert_term * texcol; 
		lightcol += diffuse;

 		// mult material & light specular
		specular = pow(max(dot(reflect_dir, eye_normal), 0.0), mtl.shininess) * mtl.specular;
		lightcol += specular;
	}
	lightcol.w = 1.0;
	return lightcol;
}

vec4 point_light(Material mtl, Light light, vec3 eye_pos, vec3 fragPos, vec3 normal)
{
	vec4 ambient = light.ambient * mtl.ambient;

	vec3 light_dir = normalize(light.position - fragPos);
	float diff = max(dot(normal, light_dir), 0.0);
	vec4 diffuse = light.diffuse * (diff * mtl.diffuse);

	vec3 view_dir = normalize(eye_pos - fragPos);
	vec3 reflect_dir = reflect(-light_dir, normal);
	float spec = 1.0 * pow(max(dot(view_dir, reflect_dir), 0.0), mtl.shininess);
	vec4 specular = light.specular * (spec * mtl.specular);

	vec3 lightcol = ambient.rgb + diffuse.rgb + specular.rgb;
	return vec4(lightcol, 1.0);
}
